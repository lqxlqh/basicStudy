单例模式：
    为了节约系统资源，有时需要确保系统中某个类只有唯一一个实例，当这个实例创建成功后，我们无法再创建
    一个同类型的其他对象，所有的操作都只能基于这个唯一实现。为了确保对象的唯一性，我们可以通过单例模
    式来实现。

    三个要点：
        1、某个类只有一个实例
        2、它必须自行创建这个实例
        3、它必须自行向整个系统提供这个实例

    在使用单例模式对负载均衡器设计时，使用过程中发现当负载均衡器在启动过程中用户再次启动该负载均衡器时，
    系统无任何异常，但当客户端请求时出现请求分发失败，原因是存在多个负载均衡对象，导致分发目标不一致。
    原因是在进行初始化工作时，因为需要时间来创建LoadBalancer对象，在这同时再一次调用getLoadBalancer()
    方法（通常发生在多线程中），导致创建了多个loadBalancer对象，违背单例模式的初衷。

    解决方法：
        1、饿汉式单例
            在定义静态变量的时候实例化单例类，在类加载的时候就已经创建了对象
        2、懒汉式单例
            懒汉式单例就是在第一次调用getLoadBalancer()方法时实例化，在类加载时并不自行实例化，这种技
            术又称为延迟加载（LazyLoad）技术，即需要的时候再加载，为了避免多个线程同时调用方法，在方法
            上使用关键字synchronized
        3、饿汉式单例和懒汉式单例优点结合--Initialization Demand Holder(loDH)技术
            在单例类中增加一个静态内部内，在该内部类中创建单例对象，再将该单例对象通过getSingleton()方法
            返回给外部使用。

    总结：单例模式作为一种目标明确、结构简单、理解容易的设计模式，在软件开发中使用频率相当高，在很多应用软件
         和框架中都得以广泛应用。


         主要优点：
            1、单例模式提供了对唯一实例的受控访问。唯一单例类封装了它的唯一实例，所以它可以严格控制客户怎样
                以及何时访问它。
            2、由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模
                式无疑可以提高系统的性能。
            3、允许可变数目的实例。基于单例模式我们可以进行扩展，使用与单例控制相似的方法来获得指定个数的对
                象实例，既节省系统资源，又解决了单例对象共享过多有损性能的问题。
         主要缺点：
            1、由于单例模式没有抽象层，因此单例类扩展有很大困难。
            2、单例类的智者过重，在一定程度上违背了"单一职责原则"。因为单例类既充当了工厂角色，提供了工厂方法，
                同时又充当了产品角色，包含一些业务方法，将产品的创建和产品本身的功能融合到一起。
            3、现在很对面对对象语言的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的共享对象长时间不被
                利用，系统会认为它是垃圾，会自动销毁并回收资源，下次使用时又将重新实例化，这将导致共享的单例
                对象状态的丢失。

         使用场景：
            1、系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器或资源管理器，或者需要考虑资源消耗
                太大而只允许创建一个对象。
            2、客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。

