工厂方法模式
    四个角色：
        Product（抽象产品）：定义产品的接口，产品对象的公共父类
        ConcreteProduct（具体产品）：实现产品接口，其某种产品由专门的具体工厂创建，产品与工厂一一对应

        Factory（抽象工厂）：工厂方法模式的核心，用于返回一个产品实例，所有创建产品对象的工厂必须实现这个接口
        ConcreteFactory（具体工厂）：抽象工厂的子类，由客户端使用，返回一个具体产品的实例

    优势：不再使用一个工厂方法创建产品实例，工厂类职责减轻，添加一个新产品只要继续实现抽象工厂即可，符合开闭原则

    缺点：增加新的产品时，需要增加产品类和工厂类，使得类的个数增加，给系统带来额外的开销，
            在一定程度上增加了系统的复杂度。
          考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加系统的抽象性和理解难度，
            在实现中用到了DOM和反射等技术，增加了系统的实现难度。