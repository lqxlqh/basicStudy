原型模式：
    通过一个原型对象克隆出多个一模一样的对象。

    概述：
        原型模式(Prototype Pattern):使用原型实例指定创建对象的种类，并通过拷贝这些原型创建新的对象。

        工作原理：将一个原型对象传给那个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝自己
            来实现创建过程。由于在软件系统中我们经常会遇到需要创建多个相同或者相似对象的情况，因此原型
            模式在真实开发中的使用频率还是非常高的。原型模式是一种"另类"的创建型模式，创建克隆对象的工
            厂就是原型类自身，工厂方法由克隆方法来实现。

        注意：通过克隆方法所创建的对象是全新的对象，它们在内存中拥有新的地址，通常对克隆所产生的对象进
            行修改对原型对象不会造成任何影响，每一个克隆对象都是相互独立的。通过不同的方式修改可以得到
            一系类相似但不完全相同的对象。

        三个角色：
            Prototype(抽象原型类):它是声明克隆方法的接口，是所有具体原型类的公共父类，可以是抽象类
                也可以是接口，甚至还可以是具体的实现类。（现用Java提供的Cloneable接口）
            ConcretePrototype(具体原型类):它实现在抽象原型类中声明的克隆方法，在克隆方法中返回自己
                的一个克隆对象。
            Client(客户类):让一个原型对象克隆自身从而创建一个新的对象，在客户类中只需要直接实例化或
                通过工厂方法等方式创建一个原型对象，再通过调用该对象的克隆方法即可得到多个相同的对象，
                由于客户类基于抽象类编程，因此用户可以根据需要选择具体原型类，系统具有较好的可扩展性。

        在Java语言中常见的两种克隆实现方式：
            1、通用实现方法（ConcretePrototype）
                通用的克隆实现方法是在具体原型类的克隆方法中实例化一个与自身类型相同的对象并将其返回，
                并将相关参数传入新创建的对象中，保证它们的成员属性相同。
            2、Java语言提供的clone()方法
                所有的Java类都继承自java.lang.Object。Object提供一个clone()方法，可以将一个Java
                对象复制一份。
                注意：实现克隆的Java类必须实现一个标识接口Cloneable,表示这个Java类支持被复制。


        一般而言，Java语言中的clone()方法满足：
            ①对任何对象o，都有o.clone()!=o，即克隆对象与原型对象不是同一个对象
            ②对任何对象o，都有o.clone().getClass() == o.getClass(),即克隆对象与原型对象的类型一样。
            ③如果对象o的equals()方法定义恰当，那么o.clone().equals(o)应该成立(在某种程度上来说克隆对
              象和原型对象是一样的)

        为了获取对象的一份拷贝，我们可以直接利用Object类的clone()方法，具体步骤：
            ①在派生类中覆盖基类的clone()方法，并声明public
            ②在派生类的clone()方法中，调用super.clone()
            ③派生类需要实现Cloneable接口
            注：Object类相当于抽象原型类，所有实现了Cloneable接口的类相当于具体原型类
